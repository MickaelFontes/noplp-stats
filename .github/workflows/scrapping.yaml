name: Update NOLPL database

on:
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch:

jobs:
  scrappping:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry install

      - name: Launch scrapping
        run: |
          poetry run python noplp/create_database.py

      - name: Update last scrapping date
        run: |
          new_line=$(date +%d/%m/%Y)
          sed -i -E "s@[0-9]\{2\}/[0-9]\{2\}/[0-9]\{4\}@${new_line}@g" pages/bottom.py

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          base: main
          commit-message: "chore(database): update database"
          title: Perform scrapping to get last database version
          branch: update-noplp-database

      - name: Fetch branches to compare
        run: |
          git fetch origin update-noplp-database main --depth=1

      - name: Write PR comment body to text file
        run: |
          poetry run python noplp/compare_changes.py > comment.md

      - uses: actions/upload-artifact@v4
        with:
          name: PR comment
          path: comment.md

      - name: Write or update summary comment in Pull Request #see https://github.com/actions/runner/issues/1733#issuecomment-2447036317
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{steps.cpr.outputs.pull-request-number}}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const commentPath = path.join(process.env.GITHUB_WORKSPACE, 'comment.md');
            const commentBody = fs.readFileSync(commentPath, 'utf8');
            const MAX_LENGTH = 65000; // a bit less than GitHub's 65536 char limit


            // Improved split: split at section or collapse boundaries
            function smartSplitComment(body, maxLength) {
              // Split at section headers or <details> tags
              const sectionRegex = /(----\n|<details>)/g;
              let parts = [];
              let lastIndex = 0;
              let match;
              let indices = [0];
              while ((match = sectionRegex.exec(body)) !== null) {
                indices.push(match.index);
              }
              indices.push(body.length);
              // Now, group sections into chunks under maxLength
              let chunk = '';
              for (let i = 0; i < indices.length - 1; i++) {
                const section = body.slice(indices[i], indices[i + 1]);
                if ((chunk.length + section.length) > maxLength && chunk.length > 0) {
                  parts.push(chunk);
                  chunk = '';
                }
                chunk += section;
              }
              if (chunk.length > 0) {
                parts.push(chunk);
              }
              return parts;
            }

            const commentChunks = smartSplitComment(commentBody, MAX_LENGTH);

            // Get all comments on the PR
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.PR_NUMBER,
            });
            // 41898282 is github-actions[bot] id.
            const botComments = comments.filter(comment => comment.user.id === 41898282);

            // Post or update comments for each chunk
            for (let idx = 0; idx < commentChunks.length; idx++) {
              const chunk = commentChunks[idx];
              if (botComments[idx]) {
                // Update existing bot comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComments[idx].id,
                  body: chunk
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  issue_number: process.env.PR_NUMBER,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: chunk
                });
              }
            }

            // Delete any extra old bot comments
            for (let idx = commentChunks.length; idx < botComments.length; idx++) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComments[idx].id
              });
            }
